
Questions : 
1. Command to create pod ? Comand to delete al pods ? Important command to wirte .yml file ? 
2. Difference bet Client side server architecture and Server side architcture in KUernatese ? 
3. Explain Kind , Metadata , apiversion , sepc in Kubernetes .yml file ? 
4. Command to run kubernates .yml file ? How to see containers in the pods ? 
5. What is the significance of labels in Kubernates ? 
6. Command to edit the pod in deployment ? 
7. What is the difference bet create command and apply command to execut .yml file in Kubernates  ? 
8. How to set Envronment variale in pod container ? What is the Significance ? 
9 . What is the comannd to run any command inside pod ? 
10 .Expalain Commands : netstat -nltp  , netcat -l -p 8080 ,telnet localhost 8080 ? 
11.  How to create multiple containers in one pod ? How to verify port sharing by two containers in same pod ?
12. What is cluster IP ? 
13 What is Kubctl expose command ? Explain for both clust IP and Node port ? 
14 What is difference bet Pods and service ? [Link : https://dev.to/techworld_with_nana/kubernetes-services-simply-explained-d5 ]
15. What is Node Port ? 
16. How service knows that the service has to redirect the request to the given particuar pods ? 
17 .What is the use of Selectors ? 
18. Create the 3 pods having same labels (Eg: app) ,and a single nodeport , when I hit the end point it 
    should rediect the all the three pods accorrdingly ?
19. What is Replication Controller ? Give sample yml file ?  Commands for replication Controller ?
20. Difference between  replicaset and Replica Controller ? 
21. What is Difference bet In and Not In operator in Match Expression in Replica Set ? 


==============================================
Answers : 
Ans 1 .   kubectl run my-pod --image=nginx --restart=Never 
          kbectl delete pods --all 
          kubectl explain pod  or  kubectl explain pod --recursive(much better) 

Ans 2 .Kubernetes has a client-server architecture, where interactions between the Kubernetes client (such as kubectl) and the server (the Kubernetes control plane, including the API server) can be described as client-side and server-side processes.
Ans 3 .
Ans 4 . kubectl apply -f <file-name>.yaml . or kubectl apply -f <file-name.yaml> --server-dry-run
        kubectl get pods <pod-name> -o wide  -> To get basic info .
        kubectl describe pod <pod-name>   -> To get detailed info .

Ans 6. 
1.If the pod is part of a deployment, you can edit the deployment, and Kubernetes will roll out the changes to the pods managed by that deployment.
 
 # Command : kubectl edit deployment <deployment-name>

2.For minor changes like updating labels or annotations, you can use the kubectl patch command.

 # Command : kubectl patch pod <pod-name> -p '{"metadata": {"labels": {"new-label": "value"}}}' 


Ans 7.  Both kubectl create and kubectl apply are used to execute YAML files and manage resources, but they behave differently based on the use case.

1. kubectl create :

   ->Purpose: Creates a resource in Kubernetes from the specified YAML file if it does not already exist.
   ->Behavior:Creates the resource for the first time.
              If the resource already exists, it throws an error indicating that the resource already exists.
              Cannot be used for updating an existing resource.
              It is imperative command .

2.kubectl apply :
 ->Purpose: Creates or updates a resource by applying changes described in the YAML file.
 ->Behavior:If the resource does not exist, it creates the resource.
          If the resource already exists, it updates the resource based on the differences between the live 
          and desired state.
  ->Declarative management: kubectl apply is used for declarative configuration .

Use case: Updating deployments, config maps, etc. where you may want to modify or apply changes to an 
         existing resource .

Ans 8 . Significance of Environment Variables in Kubernetes Pods : 

1.Decoupling Configuration from Code:
Environment variables make it easy to configure an application without changing the code. You can use the same container image across different environments (development, testing, production) by simply changing the environment variables.

2. Flexibility and Reusability:
Containers can be reused across different environments or clusters by dynamically setting configuration through environment variables.

 ### Example Use Case:
If you have a web application container that connects to a database, you might define environment variables like DB_HOST, DB_USER, and DB_PASSWORD. These variables allow the application to point to different databases in different environments (e.g., dev, prod) without changing the application code:
.yml file 
---------
apiVersion: v1
kind: Pod
metadata:
  name: webapp-pod
spec:
  containers:
    - name: webapp-container
      image: my-webapp-image
      env:
        - name: DB_HOST
          value: "db.mycompany.com"
        - name: DB_USER
          value: "user1"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-password-secret
              key: password
---------------

Ans 9 . # Command : kubectl exec -it <pod-name> -- /bin/bash -> To execute any command in pod 
        # Command : docker exec <container-name> <command>


Ans 10 .
# netstat -nltp : 
netstat is a network utility used for monitoring incoming and outgoing network connections .

# netcat -l -p 8080 :
netcat (also known as nc) is a powerful networking utility used for reading from and writing to network connections using TCP or UDP .

# telnet localhost 8080 :
This command attempts to establish a connection to the localhost on port 8080


Ans 11 . All containers in the same Pod share the same network namespace, so they can communicate over localhost .

multi-container-pod.yaml file: 
-------------------
apiVersion: v1
kind: Pod
metadata:
  name: multi-container-pod
spec:
  containers:
  - name: nginx-container
    image: nginx
    ports:
    - containerPort: 8080
  - name: busybox-container
    image: busybox
    command: ['sh', '-c', 'while true; do wget -qO- http://localhost:8080; sleep 5; done']
--------------------------
In this case:
 ->nginx-container serves content on localhost:8080.
 ->busybox-container will send HTTP requests to http://localhost:8080 every 5 seconds to verify the port sharing.

Steps : 
1 .Deploying the Pod :kubectl apply -f multi-container-pod.yaml : 
   Command :  kubectl apply -f multi-container-pod.yaml
2.Verifying Port Sharing :
    ->  Check the logs of the Busybox container:
        Command : kubectl logs <pod-name> -c busybox-container
    -> If the port sharing is successful, you should see the output of the HTTP response from the NGINX 
       container

Ans 12 :  There are different type of services in Kuernates we are going to learn two: 
            1. Cluster IP .
            2. Node port .

Cluster IP :  
ClusterIP is the default service type in Kubernetes, which exposes the service on an internal IP in the cluster.
The ClusterIP allows communication between pods within the cluster without exposing the service externally.


Ans 13 . The kubectl expose command in Kubernetes is used to create a Service that exposes a running Pod, Deployment, ReplicaSet, or ReplicationController to external or internal traffic.
#Command : 
kubectl expose <resource> <resource-name> --port=<port> --target-port=<target-port> --type=<service-type>

1.Expose a Deployment as a ClusterIP Service:
This will expose a deployment on a specific port inside the cluster:
# Command : kubectl expose deployment my-deployment --port=80 --target-port=8080 --name=my-service

2.Expose a Pod as a NodePort Service :
This will expose a pod and make it accessible via a node's IP and a specific port:
#Command : kubectl expose pod my-pod --port=80 --target-port=8080 --type=NodePort

3.Expose a Service with LoadBalancer (for Cloud Providers):
If you are running your cluster on a cloud platform that supports external load balancers (e.g., AWS, GCP, Azure), you can create a service that uses an external load balancer:

# Command: kubectl expose deployment my-deployment --port=80 --target-port=8080 --type=LoadBalancer


Ans 14 .

 ## Pods : A Pod is the smallest and most basic deployable unit in Kubernetes. It represents one or more containers that are tightly coupled and share the same network namespace and storage. 

Each pod has its own IP address, but these IPs are not stable; they can change when the pod is restarted or rescheduled.

They represent one instance of a running process, such as a web server or database.
Pods are transient, meaning they can be created, destroyed, or rescheduled by Kubernetes.

Pods are assigned a unique IP address within the cluster, and containers within a pod share this IP.

Pod IPs are ephemeral, meaning that if a pod dies and is recreated, it gets a new IP.

---------
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: nginx
    ports:
    - containerPort: 80

----------
 ## Service : A Service is an abstraction that defines a logical set of Pods and a policy for accessing them (usually via a stable IP address or DNS). Services provide stable, reliable networking for Pods, even as Pods are dynamically created or destroyed.

Services provide network access to Pods. Since Pods have dynamic IPs, a Service provides a stable way to access Pods, whether from within the cluster (using a ClusterIP) or externally (using NodePort or LoadBalancer).

Pods are assigned a unique IP address within the cluster, and containers within a pod share this IP.
Pod IPs are ephemeral, meaning that if a pod dies and is recreated, it gets a new IP.

--------------
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: my-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: ClusterIP


---------------

Ans 15 : Node Port : In Kubernetes, NodePort is a type of Service that allows you to expose a service on a static port (the NodePort) on each node in the cluster.
The NodePort is a static port that is the same across all nodes. This port number is used to access the service from outside the Kubernetes cluster.

How NodePort Works:
->Requests are made to NodeIP:NodePort.
->Kubernetes forwards the traffic from the node to the corresponding service, which forwards it to the Pods.
->It enables external access to a service without the need for additional cloud provider load balancers or external services .

Use Case:
Exposing services externally: If you need to access a service from outside the cluster but do not have a cloud provider’s LoadBalancer, you can use NodePort.
Testing and debugging: NodePort is often used in development clusters or small setups to expose services without requiring cloud infrastructure.

## Command : kubectl expose deployment my-deployment --type=NodePort --port=80 --target-port=8080
-----------------------------
apiVersion: v1
kind: Service
metadata:
  name: my-nodeport-service
spec:
  type: NodePort
  selector:
    app: my-app
  ports:
  - port: 80            # Port exposed by the service
    targetPort: 8080     # Port on the Pod (container)
    nodePort: 30007      # Port on each node (optional, if not specified, Kubernetes will pick one)
--------------------------------
# Accessing the Service:
Ex :    http://<NodeIP>:<NodePort>
Ex :    http://192.168.1.10:30007

Ans 16 : 


Ans 17 : 
         
1. Binding Services to Pods:A Service uses the selector to route traffic to the correct Pods. The selector ensures that only Pods with matching labels receive traffic from the Service.
--------------
selector:
  app: my-app
-------------------
2.Decoupling:
It allows for decoupling the Service from the Pods' actual configuration. If you want to change which Pods receive traffic, you just need to update the Pods' labels, without modifying the Service.

Ans 18 : 
Step 1 : Create a Deployment with three replicas (this will ensure three Pods are created).
Create a Service of type NodePort to expose the Pods and distribute traffic between them.

## Create a Deployment with 3 Pods
--------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-deployment
spec:
  replicas: 3  # Creates 3 Pods
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app  # All Pods will have this label
    spec:
      containers:
        - name: my-app-container
          image: nginx  # You can replace this with your app's image
          ports:
            - containerPort: 8080


---------------------
## Create a NodePort Service to Expose the Pods :
-----------------------
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
spec:
  type: NodePort
  selector:
    app: my-app  # Matches the label of the Pods
  ports:
    - protocol: TCP
      port: 80           # Service port (what external clients hit)
      targetPort: 8080    # The port on the container (inside the Pod)
      nodePort: 30007     # Expose this NodePort (optional; if omitted, Kubernetes will auto-assign)

-----------------------

Step 2: Save the YAML files: Save the above YAML in a file, e.g., my-app.yml.

Step 3:
kubectl apply -f my-app.yml

Step 4: 

kubectl get pods
kubectl get svc

Step 5 : 
Access the service: To access the application, use the Node IP and NodePort (e.g., 30007). For example, if the Node IP is 192.168.99.100, you can access the service in your browser or using curl like this:

Ans 19 : In Kubernetes, a ReplicationController is responsible for ensuring that a specified number of replicas (identical Pods) are running at all times. If a Pod goes down or is deleted, the ReplicationController will automatically replace it with a new one, making sure the desired state (number of running Pods) is always met.

--------------------
apiVersion: v1
kind: ReplicationController
metadata:
  name: my-app-rc
spec:
  replicas: 3  # Number of Pods to maintain
  selector:
    app: my-app  # Select Pods with this label
  template:
    metadata:
      labels:
        app: my-app  # All Pods will have this label
    spec:
      containers:
        - name: my-app-container
          image: nginx  # Application image
          ports:
            - containerPort: 80
-------------------
 # Components:
replicas: Defines how many instances (Pods) of your application should run.
selector: Tells the ReplicationController which Pods it should manage, based on labels.
template: Defines the Pods that will be created by the ReplicationController.

# Use Case for ReplicationController:
You use a ReplicationController when you need to ensure a fixed number of stateless Pods are always running.

# Commands for Replication Controler : 
 1. kubectl apply -f <filename>.yaml : Create replication Controller .
 2.kubectl get rc : list replication controller .
 3.kubectl get rc -w : get replication Controller .


Ans 20 . The Replica Controller in Kubernetes  ensures that  specified number of pod replicas are running at any given time. 

         




