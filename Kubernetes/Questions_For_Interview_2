26. Explain Kubernates Rollout  ? 
27.What is the default value if we dont define maxsurge and maxunavailable ? 
28.Explain Resource limit in Kubernates ? 
29.What is NameSpace in Kubernatese ? 
30 Real Life use case of Namspace ? Can we create nampspace inside name space ? 
31.Create two servcie in two different nameSpace and access the one service form another namespace ? Write steps ?
32.What is DNS service in Kubernates ? 
33.




===================================================================

Ans 26. In Kubernetes, a rollout refers to the process of updating a deployment to a new version of an application. It ensures smooth upgrades with minimal downtime by rolling out changes incrementally, maintaining availability while testing the new version. The rollout mechanism allows you to control the speed, manage failures, and even roll back to a previous state if something goes wrong.

Some RollOut Commands : 
1. Check Rollout Status: You can track the progress of a rollout using the command:
  # Command: kubectl rollout status deployment/<deployment-name>

2.Rollout History: To view the history of rollouts, including past revisions:
 #Command :kubectl rollout history deployment/<deployment-name>

3.Rollback: If an issue arises during a rollout, Kubernetes allows you to roll back to a previous version. You can roll back to any revision using:
 #Command : kubectl rollout undo deployment/<deployment-name>

# Example : 
Suppose you have a Deployment running a web application (v1), and you want to update it to v2. Youâ€™d update the Deployment manifest to point to the new container image (v2), and then apply the changes:
-----------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app-container
        image: my-app:v2  # Update the image version
-------------------------------------------------
Then, apply the updated deployment:
 #Command : kubectl apply -f deployment.yaml

Benefits of Kubernetes Rollout:
 Zero Downtime: Rolling updates are designed to keep the service available during updates.
 Control Over Updates: You can pause, resume, and roll back updates easily.
 Version History: Kubernetes keeps track of past versions, allowing for smooth rollbacks.

--------------
Ans 27. In Kubernetes, during a rolling update for a Deployment, the default behavior is defined by two key parameters: maxSurge and maxUnavailable. These parameters control how many Pods can be created or deleted at the same time during the update process.

# Default Values:

1. maxSurge (Default: 25%):
This parameter specifies the maximum number of extra Pods that can be created during the update process, relative to the desired number of Pods.
For example, if your Deployment has 4 replicas, a default maxSurge of 25% means Kubernetes can temporarily create 1 additional Pod (25% of 4 = 1) while the update is happening. So, during the update, up to 5 Pods could be running.

2. maxUnavailable (Default: 25%):
This parameter specifies the maximum number of Pods that can be unavailable during the update process.
Using the same example, if you have 4 replicas, a default maxUnavailable of 25% means 1 Pod can be taken down and unavailable while the new version is being rolled out.

----------
Ans 28 :
In Kubernetes, resource limits help control how much CPU and memory a container can use within a cluster. Setting appropriate resource requests and limits ensures that containers have the resources they need to run, while also preventing a single container from consuming too many resources and affecting other workloads.

Key Concepts:

1.Requests:
Request is the amount of CPU or memory that a container is guaranteed to have. If a node has enough resources, the container will get at least this amount.

The Kubernetes scheduler uses the request value to decide which node can run the container.

2.Limits:
Limit is the maximum amount of CPU or memory that a container can use. The container can burst up to this value, but it cannot exceed this limit.

If the container tries to exceed the specified limit:
For CPU, it will be throttled, meaning it will be allowed to use only up to the limit, and no more.
For memory, if the container exceeds the memory limit, it will be terminated (killed) by the system and possibly restarted.
--------------------------
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: nginx
    resources:
      requests:
        memory: "64Mi"   # Request 64 MiB of memory
        cpu: "250m"      # Request 250 milliCPU (0.25 of a CPU core)
      limits:
        memory: "128Mi"  # Set maximum memory limit to 128 MiB
        cpu: "500m"      # Set maximum CPU limit to 500 milliCPU (0.5 of a CPU core)

----------------------------

Ans 29 : In Kubernetes, a namespace is a way to divide cluster resources between multiple users or applications. It is essentially a virtual cluster that allows for organizing and isolating resources such as pods, services, and other objects within a single physical Kubernetes cluster. This is especially useful in larger environments where multiple teams or projects share the same Kubernetes infrastructure.

Namespaces provide the following key functionalities:

Resource Isolation: Namespaces allow for isolating workloads. Different teams, environments (development, staging, production), or applications can be kept separate within the same Kubernetes cluster by assigning resources to different namespaces.

Scoping: Namespaces help scope resource names. Kubernetes object names (like pods, services, etc.) must be unique within a namespace but can be reused across different namespaces. This means you can have objects with the same name in different namespaces without conflict.

Resource Quotas: You can use resource quotas to limit the amount of resources (CPU, memory, etc.) that a particular namespace can consume, ensuring fair resource distribution.

Access Control: Namespaces work with Kubernetes Role-Based Access Control (RBAC) to restrict or grant access to specific resources in a namespace. This enables you to define permissions for different users or services on a per-namespace basis.

Default Namespace: Kubernetes provides a default namespace called default, which is used when no other namespace is specified.

## Example Commands:
1.To list all namespaces in a cluster:
    Command : kubectl get namespaces 

2.To create a new namespace:
    Command : kubectl create namespace my-namespace

3. To deploy resources in a specific namespace:
    Command : kubectl apply -f pod.yaml --namespace=my-namespace

4. To get pod in specific namespace : 
    Command : kubectl get pods --namespace=<namespace-name>
-------------------------------------

Ans 30 .  
Kubernetes namespaces are used to organize and isolate resources within a cluster. They are useful for separating different environments, teams, or projects in a shared cluster, ensuring better management, security, and resource allocation. While you cannot create a namespace inside another namespace (as Kubernetes does not support nested namespaces), namespaces offer various real-life use cases across different industries.

1.Multi-Tenant Clusters :
A single Kubernetes cluster can be used by multiple teams (tenants), with each tenant getting its own namespace. This ensures that teams can work in isolation.

2.Separation of Environments :
Namespaces are commonly used to separate development, staging, and production environments. Each environment gets its own namespace (e.g., dev, staging, prod).

3. Isolating Microservices :
In microservices architectures, different microservices can be deployed in separate namespaces for better isolation and management.

4.CI/CD Pipelines
Namespaces can be used to create separate environments for continuous integration/continuous deployment (CI/CD) pipelines, where each pipeline stage is isolated from the others.

------------------------------------
Ans 31.
Overview:
1.Create two namespaces (namespace-a and namespace-b).
2.Deploy a service and pod in each namespace.
3.Access the service in namespace-a from a pod in namespace-b.

## Steps:

Step 1: Create Namespaces :Create two namespaces, namespace-a and namespace-b.
------------
# Create namespace-a
kubectl create namespace namespace-a

# Create namespace-b
kubectl create namespace namespace-b
-------------------

Step 2: Deploy a Pod and Service in namespace-a :
----------------
# file: service-a.yaml
apiVersion: v1
kind: Pod
metadata:
  name: pod-a
  labels:
    app: pod-a
spec:
  containers:
  - name: nginx
    image: nginx
---
apiVersion: v1
kind: Service
metadata:
  name: service-a
spec:
  selector:
    app: pod-a
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

----------------
Apply the configuration to namespace-a:
## Command : kubectl apply -f service-a.yaml --namespace=namespace-a

Step 3: Deploy a Pod and Service in namespace-b
------------------
# file: service-b.yaml
apiVersion: v1
kind: Pod
metadata:
  name: pod-b
  labels:
    app: pod-b
spec:
  containers:
  - name: nginx
    image: nginx
---
apiVersion: v1
kind: Service
metadata:
  name: service-b
spec:
  selector:
    app: pod-b
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

------------------
 Apply the configuration to namespace-b:
## Command : kubectl apply -f service-b.yaml --namespace=namespace-b

Step 4: Access service-a from namespace-b :

To access a service across namespaces, Kubernetes automatically provides a fully qualified domain name (FQDN) for services in the format:  <service-name>.<namespace>.svc.cluster.local


 ->So, for service-a in namespace-a, the FQDN would be:

 ##Command service-a.namespace-a.svc.cluster.local

 -> Now, to test this, create a temporary pod in namespace-b to use as a client and connect to service-a.
 ## Command : # Run a test pod in namespace-b to access service-a
              kubectl run test-pod --rm -i --tty --image=busybox --namespace=namespace-b -- /bin/sh

  -> Once inside the test-pod, use wget or curl to access service-a using its FQDN:
   ## Command: # Inside test-pod, run the following command to access service-a
                  wget -qO- service-a.namespace-a.svc.cluster.local

-----------------------
Ans 32 . In Kubernetes, DNS (Domain Name System) is a core service that provides service discovery by allowing pods and services within a cluster to discover and communicate with each other using DNS names rather than hardcoded IP addresses. The Kubernetes DNS service automatically creates DNS entries for services and pods, allowing them to be accessed by a name rather than by their IP address, which may change over time.

Key Points About DNS in Kubernetes:

1. Service Discovery:
Kubernetes DNS allows services to be discovered using their names. For example, if a service named my-service is created in a namespace called my-namespace, other services or pods can access it via my-service.my-namespace.svc.cluster.local (the fully qualified domain name or FQDN).

2.Pod-to-Service Communication:

When a pod wants to communicate with another service in the cluster, it can use DNS. For example, if a service named backend is running in the default namespace, any pod can reach it via backend.default.svc.cluster.local.

3.Automatic DNS Resolution for Services:
Every time a Kubernetes service is created, it automatically gets a DNS entry. The format is:
 ## <service-name>.<namespace>.svc.cluster.local
For example, if you create a service called api-service in the dev namespace, it can be accessed using api-service.dev.svc.cluster.local.

## DNS Name Structure in Kubernetes:   <service-name>.<namespace>.svc.cluster.local
----------------------------------------

Ans 33 .



